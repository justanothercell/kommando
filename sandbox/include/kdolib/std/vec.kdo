use std::*;
use std::slice::Slice;

pub struct Vec<T> {
    length: usize,
    capacity: usize,
    buffer: ptr<T>
}

impl<T> Vec<T> {
    pub fn new() -> Vec<T> {
        Vec::<T>::new_with(0)
    }

    pub fn new_with(capacity: usize) -> Vec<T> {
        _ {
            length: 0,
            capacity: capacity,
            buffer: std::mem::arr_new(capacity)
        }
    }

    fn reserve_armortized(v: ptr<Vec<T>>, size: usize) {
        if v.capacity >= size { return; };
        if v.capacity == 0 { v.capacity = 8; };
        while v.capacity < size {
            v.capacity *= 2;
        };
        v.buffer = std::mem::arr_resize(v.buffer, v.capacity);
    }

    pub fn push(v: ptr<Vec<T>>, item: T) {
        v.reserve_armortized(v.length + 1);
        *std::mem::arr_offset(v.buffer, v.length) = item;
        v.length += 1;
    }

    pub fn get(v: ptr<Vec<T>>, i: usize) -> Option<T> {
        if i < v.length {
            Option::<_>::some(*std::mem::arr_offset(v.buffer, i))
        } else {
            Option::<_>::none()
        }
    }

    pub fn get_ref(v: ptr<Vec<T>>, i: usize) -> Option<ptr<T>> {
        if i < v.length {
            Option::<_>::some(std::mem::arr_offset(v.buffer, i))
        } else {
            Option::<_>::none()
        }
    }
    pub fn last(v: ptr<Vec<T>>) -> Option<T> {
        if v.length == 0 {
            return Option::<_>::none();
        };
        v.get(v.length - 1)
    }
    pub fn last_ref(v: ptr<Vec<T>>) -> Option<ptr<T>> {
        if v.length == 0 {
            return Option::<_>::none();
        };
        v.get_ref(v.length - 1)
    }

    pub fn pop(v: ptr<Vec<T>>) -> Option<T> {
        if v.length > 0 {
            v.length -= 1;
            Option::<_>::some(*std::mem::arr_offset(v.buffer, v.length))
        } else {
            Option::<_>::none()
        }
    }

    pub fn swap_remove(v: ptr<Vec<T>>, index: usize) -> Option<T> {
        if index >= v.length {
            return Option::<_>::none();
        };
        if index < v.length - 1 {
            std::mem::swap(
                std::mem::arr_offset(v.buffer, index),
                std::mem::arr_offset(v.buffer, v.length - 1)
            );
        };
        v.length -= 1;
        Option::<_>::some(*std::mem::arr_offset(v.buffer, v.length))
    }

    pub fn remove(v: ptr<Vec<T>>, index: usize) -> Option<T> {
        if index >= v.length {
            return Option::<_>::none();
        };
        let item = *std::mem::arr_offset(v.buffer, index);
        v.length -= 1;
        while index < v.length {
            *std::mem::arr_offset(v.buffer, index) = *std::mem::arr_offset(v.buffer, index+1);
            index += 1;
        };
        Option::<_>::some(item)
    }

    pub fn clear(v: ptr<Vec<T>>) {
        v.length = 0;
    }

    pub fn free(v: ptr<Vec<T>>) {
        std::mem::free(v.buffer);
        v.buffer = std::mem::null();
        v.length = 0;
        v.capacity = 0;
    }

    pub fn slice(v: ptr<Vec<T>>) -> Slice<T> {
        v.slice_range(0, v.length)
    }

    pub fn slice_range(v: ptr<Vec<T>>, from: usize, to: usize) -> Slice<T> {
        if to < from { panic("Slice range negative") };
        if v.length < to { panic("Slice out of range for vector") };
        _ { buffer: std::mem::arr_offset(v.buffer, from), length: to - from }
    }
}

impl Vec<char> {
    // Appends a zero terminator but does not increase length.
    // That way the teminator can be overridden on future appends.
    pub fn as_str(v: ptr<Vec<char>>) -> c_str {
        v.reserve_armortized(v.length + 1); // zero terminator
        *std::mem::arr_offset(v.buffer, v.length) = 0; // we append zero terminator but we do not increase length
        typecast(v.buffer)
    }
}

use std::fmt::*;

impl<T: Fmt> Vec<T>: Fmt {
    fn dyn_fmt(v: ptr<Vec<T>>) -> DynFmt {
        _ { object: typecast(v), fmt: Vec::<T>::fmt }
    }
    fn fmt(v: ptr<Vec<T>>, fmt: ptr<Formatter>, stream: ptr<FormatStream>) {
        stream.write_str("[");
        let i = 0usize;
        while i < v.length {
            if i > 0 { stream.write_str(", "); };
            v.get(i).unwrap().fmt(fmt, stream);
            i += 1;
        };
        stream.write_str("]");
    }
}