use std::*;
use std::vec::Vec;
use c_api::printf;

fn main() {
    printf("=== Vector test ===\n");
    let vec: _<u32> = Vec::<_>::new();
    let a = 1u32;
    let b = 1u32;
    while a < 128 {
        vec.push(a);
        let t = a + b;
        a = b;
        b = t;
    };
    printf("length: %lu\n", vec.length);
    printf("capacity: %lu\n", vec.capacity);
    let i: usize = 0;
    while i < vec.length {
        printf("%3lu. %3u\n", i, vec.get(i).unwrap());
        i = i + 1;
    };
    printf("Popping:\n");
    while vec.length > 0 {
        let item = vec.pop().unwrap();
        printf("%3u ", item);
    };
    printf("\n");
    printf("New with capacity:\n");
    let pies = Vec::<f32>::new_with(10);
    while pies.length < pies.capacity {
        pies.push(math::PIf32 * numcast(pies.length));
    };
    println("$", pies.dyn_fmt());
}