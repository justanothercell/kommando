use std::*;
use std::vec::Vec;
use std::slice::Slice;

// This is a stack based calculator
// Examples:
// 3 4 * 2 +   =>   3 * 4 + 2     | push 3, push 4, multiply (3 * 4 -> 12), push 2, add (2 + 12 -> 14)
// 3:*         =>   3 * :         | push 3, duplictate (3 -> 3, 3), multiply (3 * 3 -> 9)
//                  ^---*
// 4!                             | push 4, factorial
// 3 4 <       =>   3 < 4           | push 3, push 4, test for less than (in this case yields 1)
// 3 4 >       =>   3 > 4           | push 3, push 4, test for greater than (in this case yields 0)
// .. same with `=` for equality
//
// Conditionals: 
// replace a b and x with numbers:
// a b x [ _ 1 0 ] *     => if x == 0 { return a * b } else { return a }
//
// a    | push a: [empty] -> a
// b    | pusb b: a -> b, a
// x    | push x: b, a -> x, b, a
// [    | start: if x goto end
//   _  |   drop top element: b, a -> a
//   1  |   push 1: a -> 1, a
//   0  |   push 0: 1, a -> 0, 1, a
// ]    | end: if not 0 goto start
// *    | multiply a * b (or a * 1 depending on x)
//
// Calculate sum of 0 to n (remplace n with number)
// n :: [ 1 - #;+#: ] _

const PRECISION: f64 = 10000000;

fn main() {
    while true {
        let stack: _<f64> = Vec::<_>::new();

        let input: c_str = io::input(">>> ");
        if input == c_api::nullstr { // EOF
            c_api::printf("\n");
            break;
        };
        let text = Slice::<char>::from_c_str(input);
        let i = 0usize;
        let numstate = 0;
        let num: f64 = 0.0;
        let fdigits = 0;

        while i <= text.length {
            let c = text.get(i).unwrap_or(32); // 32 == ' '
            i += 1;
            if c >= 48 && c <= 57 { // 0 - 9
                if numstate == 0 {
                    numstate = 1;
                    fdigits = 0;
                    num = 0;
                };
                num = num * 10 + numcast(c - 48);
                if numstate == 2 {
                    fdigits += 1; 
                };
                continue;
            };
            if numstate == 1 && c == 46 { // .
                numstate = 2;
                continue;
            };
            // not continued: end of number!
            if numstate != 0 {
                numstate = 0;
                num = num / c_api::math::pow(10.0, numcast(fdigits));
                stack.push(num);
            };
            if c == 32 { // ' '
                continue;
            };
            if c == 43 { // +
                if stack.length < 2 { c_api::printf("Stack needs at least 2 elements, got %lu\n", stack.length); break; };
                let a = stack.get(stack.length - 2).unwrap();
                let b = stack.get(stack.length - 1).unwrap();
                stack.length = stack.length - 1;
                *stack.get_ref(stack.length - 1).unwrap() = a + b;
                continue;
            };
            if c == 45 { // -
                if stack.length < 2 { c_api::printf("Stack needs at least 2 elements, got %lu\n", stack.length); break; };
                let a = stack.get(stack.length - 2).unwrap();
                let b = stack.get(stack.length - 1).unwrap();
                stack.length = stack.length - 1;
                *stack.get_ref(stack.length - 1).unwrap() = a - b;
                continue;
            };
            if c == 42 { // *
                if stack.length < 2 { c_api::printf("Stack needs at least 2 elements, got %lu\n", stack.length); break; };
                let a = stack.get(stack.length - 2).unwrap();
                let b = stack.get(stack.length - 1).unwrap();
                stack.length = stack.length - 1;
                *stack.get_ref(stack.length - 1).unwrap() = a * b;
                continue;
            };
            if c == 47 { // /
                if stack.length < 2 { c_api::printf("Stack needs at least 2 elements, got %lu\n", stack.length); break; };
                let a = stack.get(stack.length - 2).unwrap();
                let b = stack.get(stack.length - 1).unwrap();
                stack.length = stack.length - 1;
                *stack.get_ref(stack.length - 1).unwrap() = a / b;
                continue;
            };
            if c == 62 { // >
                if stack.length < 2 { c_api::printf("Stack needs at least 2 elements, got %lu\n", stack.length); break; };
                let a = stack.get(stack.length - 2).unwrap();
                let b = stack.get(stack.length - 1).unwrap();
                stack.length = stack.length - 1;
                *stack.get_ref(stack.length - 1).unwrap() = numcast(numcast::<_, i64>(a * PRECISION) > numcast::<_, i64>(b * PRECISION));
                continue;
            };
            if c == 60 { // <
                if stack.length < 2 { c_api::printf("Stack needs at least 2 elements, got %lu\n", stack.length); break; };
                let a = stack.get(stack.length - 2).unwrap();
                let b = stack.get(stack.length - 1).unwrap();
                stack.length = stack.length - 1;
                *stack.get_ref(stack.length - 1).unwrap() = numcast(numcast::<_, i64>(a * PRECISION) < numcast::<_, i64>(b * PRECISION));
                continue;
            };
            if c == 61 { // =
                if stack.length < 2 { c_api::printf("Stack needs at least 2 elements, got %lu\n", stack.length); break; };
                let a = stack.get(stack.length - 2).unwrap();
                let b = stack.get(stack.length - 1).unwrap();
                stack.length = stack.length - 1;
                *stack.get_ref(stack.length - 1).unwrap() = numcast(numcast::<_, i64>(a * PRECISION) == numcast::<_, i64>(b * PRECISION));
                continue;
            };
            if c == 91 { // [
                if stack.length < 1 { c_api::printf("Stack is empty\n"); break; };
                let x = stack.get(stack.length - 1).unwrap();
                stack.length = stack.length - 1;
                if numcast::<_, i64>(x * PRECISION) == 0 {
                    while i < text.length {
                        let c = text.get(i).unwrap_or(32); // 32 == ' '
                        i += 1; // we end up AFTER the ]
                        if c == 93 { break; }; // ]
                    };
                };
                continue;
            };
            if c == 93 { // [
                if stack.length < 1 { c_api::printf("Stack is empty\n"); break; };
                let x = stack.get(stack.length - 1).unwrap();
                stack.length = stack.length - 1;
                if numcast::<_, i64>(x * PRECISION) != 0 {
                    while i > 0 {
                        let c = text.get(i-1).unwrap_or(32); // 32 == ' '
                        if c == 91 { break; }; // [
                        i -= 1; // we end up AFTER the [
                    };
                };
                continue;
            };
            if c == 35 { // # swap
                if stack.length < 2 { c_api::printf("Stack needs at least 2 elements, got %lu\n", stack.length); break; };
                let a = stack.get(stack.length - 1).unwrap();
                let b = stack.get(stack.length - 2).unwrap();
                *stack.get_ref(stack.length - 1).unwrap() = b;
                *stack.get_ref(stack.length - 2).unwrap() = a;
                continue;
            };
            if c == 58 { // : dup
                if stack.length < 1 { c_api::printf("Stack is empty\n"); break; };
                let v = stack.get(stack.length - 1).unwrap();
                stack.push(v);
                continue;
            };
            if c == 59 { // ; dup 2nd: a, b, c, ... -> b, a, b, c, ...
                if stack.length < 2 { c_api::printf("Stack needs at least 2 elements, got %lu\n", stack.length); break; };
                let v = stack.get(stack.length - 2).unwrap();
                stack.push(v);
                continue;
            };
            if c == 95 { // _ drop
                if stack.length < 1 { c_api::printf("Stack is empty\n"); break; };
                stack.length = stack.length - 1;
                continue;
            };
            if c == 33 { // ! fact
                if stack.length < 1 { c_api::printf("Stack is empty\n"); break; };
                let a = stack.get(stack.length - 1).unwrap();
                let sum: f64 = 1;
                while a > 0 {
                    sum *= a;
                    a -= 1;
                };
                *stack.get_ref(stack.length - 1).unwrap() = sum;
                continue;
            };
            c_api::printf("Invalid op '%c'\n", c);
            break;
        };
        if stack.length == 0 {
            c_api::printf("Stack is empty\n");
            continue;
        };
        c_api::printf(" = ");
        let i = stack.length;
        while i > 0 {
            c_api::printf("%f ", stack.get(i-1).unwrap());
            i -= 1;
        };
        c_api::printf("\n");
        c_api::freestr(input);
    };
}