type Foo<T> = struct {
    value: T
}

type Thing1 = struct {
    foo: Foo<bool>
}

type Thing2 = struct {
    foo: Foo<bool>
}

type Wrapper<T> = struct {
    foo1: Foo<T>,
    foo2: Foo<&T>,
    foo3: Foo<Foo<T>>
}

fn new<T>() -> T {
    let value: T;
    return value;
}

fn main() {
    let f1: Foo<u8> = new::<Foo<u8>>();
    let f2: Foo<i8> = new::<Foo<i8>>();
    let f3: Foo<&usize> = new::<Foo<&usize>>();
    let f4: Wrapper<&usize> = new::<Wrapper<&usize>>();
    let f5: Wrapper<f32> = new::<Wrapper<f32>>();
    let f6: Wrapper<f64> = new::<Wrapper<f64>>();
    let f7: Thing1 = new::<Thing1>();
    let f8: Thing2 = new::<Thing2>();
}