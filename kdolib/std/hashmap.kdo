use std::*;
use std::vec::Vec;

pub struct Entry<K, V> {
    key: K, 
    value: V
}

pub struct HashMap<K, V> {
    buckets: Vec<Vec<Entry<K, V>>>,
    random: u32,
    load_factor: f32,
    length: usize
}

impl<K, V> HashMap<K, V> {
    pub fn new() -> HashMap<K, V> {
        HashMap::<_, _>::new_with(0.75)
    }

    pub fn new_with(load_factor: f32) -> HashMap<K, V> {
        let buckets = Vec::<Vec<Entry<K, V>>>::new_with(256);
        while buckets.length < buckets.capacity {
            buckets.push(Vec::<_>::new());
        };
        _ {
            buckets: buckets,
            random: numcast(c_api::rand()),
            load_factor: load_factor,
            length: 0
        }
    }

    pub fn put(self: ptr<HashMap<K, V>>, key: K, value: V) -> Option<Entry<K, V>> {
        let hash: usize = numcast(key); // TODO: hashable
        let bucket = self.buckets.get_ref(hash % self.buckets.length).unwrap();
        let entry = Entry { key: key, value: value };
        let i = 0usize;
        while i < bucket.length {
            let old_entry = bucket.get_ref(i).unwrap();
            if old_entry.key == entry.key {
                return Option::<_>::some(std::mem::replace(old_entry, entry));
            }
        };
        bucket.push(entry);
        self.length += 1;
        // rehash?
        if numcast::<_, f32>(self.length) / numcast::<_, f32>(self.buckets.length) > self.load_factor {
            let old_buckets = self.buckets;
            self.buckets = Vec::<Vec<Entry<K, V>>>::new_with(self.buckets.length * 2);
            while self.buckets.length < self.buckets.capacity {
                self.buckets.push(Vec::<_>::new());
            };
            while old_buckets.length > 0 {
                let old_bucket = old_buckets.pop().unwrap();
                while old_bucket.length > 0 {
                    let old_entry = old_bucket.pop().unwrap();
                    self.put(old_entry.key, old_entry.value);
                };
                old_bucket.free();
            };
            old_buckets.free();
        };
        Option::<_>::none()
    }

    pub fn remove(self: ptr<HashMap<K, V>>, key: K) -> Option<Entry<K, V>> {
        let hash: usize = numcast(key); // TODO: hashable
        let bucket = self.buckets.get_ref(hash % self.buckets.length).unwrap();
        let i = 0usize;
        while i < bucket.length {
            if bucket.get(i).unwrap().key == key {
                self.length -= 1;
                return bucket.swap_remove(i);
            }
        };
        Option::<_>::none()
    }

    pub fn get(self: ptr<HashMap<K, V>>, key: K) -> Option<V> {
        let hash: usize = numcast(key); // TODO: hashable
        let bucket = self.buckets.get(hash % self.buckets.length).unwrap();
        let i = 0usize;
        while i < bucket.length {
            let entry = bucket.get(i).unwrap();
            if entry.key == key {
                return Option::<_>::some(entry.value);
            }
        };
        Option::<_>::none()
    }

    pub fn get_ref(self: ptr<HashMap<K, V>>, key: K) -> Option<ptr<V>> {
        let hash: usize = numcast(key); // TODO: hashable
        let bucket = self.buckets.get(hash % self.buckets.length).unwrap();
        let i = 0usize;
        while i < bucket.length {
            let entry = bucket.get(i).unwrap();
            if entry.key == key {
                return Option::<_>::some(&entry.value);
            }
        };
        Option::<_>::none()
    }

    pub fn contains(self: ptr<HashMap<K, V>>, key: K) -> bool {
        let hash: usize = numcast(key); // TODO: hashable
        let bucket = self.buckets.get(hash % self.buckets.length).unwrap();
        let i = 0usize;
        while i < bucket.length {
            let entry = bucket.get(i).unwrap();
            if entry.key == key {
                return true;
            }
        };
        false
    }

    pub fn iter(self: ptr<HashMap<K, V>>) -> Iter<K, V> {
        _ {
            map: self,
            i: 0,
            j: 0
        }
    }

    pub fn free(self: ptr<HashMap<K, V>>) {
        let i = 0usize;
        while i < self.buckets.length {
            self.buckets.get(i).unwrap().free();
            i += 1;
        };
        self.buckets.free();
    }
}

pub struct Iter<K, V> {
    map: ptr<HashMap<K, V>>,
    i: usize, 
    j: usize
}

impl<K, V> Iter<K, V> {
    pub fn next(self: ptr<Iter<K, V>>) -> Option<Entry<K, V>> {
        if self.i >= self.map.buckets.length {
            return Option::<_>::none();
        };
        while self.i < self.map.buckets.length {
            let bucket = self.map.buckets.get(self.i).unwrap();
            if self.j >= bucket.length {
                self.i += 1;
                self.j = 0;
            } else {
                let entry = bucket.get(self.j).unwrap();
                self.j += 1;
                return Option::<_>::some(entry);
            }
        };
        Option::<_>::none()
    }
}