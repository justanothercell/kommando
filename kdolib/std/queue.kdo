use std::*;

use core::drop::Drop;

// QUeue implemented on a ring buffer
pub struct Queue<T> {
    index: usize,
    length: usize,
    capacity: usize,
    buffer: ptr<T>
}

impl<T> Queue<T> {
    pub fn new() -> Queue<T> {
        _ {
            index: 0,
            length: 0,
            capacity: 0,
            buffer: std::mem::null()
        }
    }

    pub fn new_with_capacity(capacity: usize) -> Queue<T> {
        _ {
            index: 0,
            length: 0,
            capacity: capacity,
            buffer: std::mem::arr_new(capacity)
        }
    }

    pub fn push(v: ptr<Queue<T>>, item: T) {
        if v.length == v.capacity {
            let old_capacity = v.capacity;
            v.capacity *= 2;
            if v.capacity == 0 { v.capacity = 8; };
            v.buffer = std::mem::arr_resize(v.buffer, v.capacity);
            let i = 0usize;
            while i < v.index {
                *std::mem::arr_offset(v.buffer, (old_capacity + i) % v.capacity) = *std::mem::arr_offset(v.buffer, i);
                i += 1;
            }
        };
        *std::mem::arr_offset(v.buffer, (v.index + v.length) % v.capacity) = item;
        v.length += 1;
    }

    pub fn pop(v: ptr<Queue<T>>) -> Option<T> {
        if v.length > 0 {
            let item = *std::mem::arr_offset(v.buffer, v.index);
            v.length -= 1;
            v.index += 1;
            if v.index == v.capacity {
                v.index = 0;
            };
            Option::<_>::some(item)
        } else {
            Option::<_>::none()
        }
    }

    pub fn peek(v: ptr<Queue<T>>) -> Option<ptr<T>> {
        if v.length > 0 {
            Option::<_>::some(std::mem::arr_offset(v.buffer, v.index))
        } else {
            Option::<_>::none()
        }
    }

    pub fn clear(v: ptr<Queue<T>>) {
        v.length = 0;
        v.index = 0;
    }

    pub fn free(v: ptr<Queue<T>>) {
        std::mem::free(v.buffer);
        v.buffer = std::mem::null();
        v.index = 0;
        v.length = 0;
        v.capacity = 0;
    }
}

impl<T> Queue<T>: Drop {
    fn drop(self: ptr<Queue<T>>) {
        let i = 0usize;
        while i < self.length {
            std::mem::replace(std::mem::arr_offset(self.buffer, (i + self.index) % self.capacity), std::mem::uninit()); // drops item
        };
        std::mem::free(self.buffer);
    }
}