pub use std::raw_ptr as CFileStream;

#[extern]
#[no_mangle]
pub static stdin: CFileStream;

#[extern]
#[no_mangle]
pub static stdout: CFileStream;

#[extern]
#[no_mangle]
pub static stderr: CFileStream;

pub fn input(message: std::c_str) -> std::c_str {
    c_api::printf("%s", message);
    c_api::fflush(stdout);
    let out_line: std::c_str = c_api::nullstr;
    let out_len = 0usize;
    c_api::getline(&out_line, &out_len, stdin);
    let length = c_api::str::strlen(out_line);
    if length == 0 { 
        return c_api::nullstr;
    };
    let out_line_as_u8_ptr: ::std::ptr<::std::u8> = std::typecast(out_line);
    *std::mem::arr_offset(out_line_as_u8_ptr, length - 1) = 0;
    out_line
}


//struct termios orig_termios;
//
//void reset_terminal_mode()
//{
//    tcsetattr(0, TCSANOW, &orig_termios);
//}
//
//void set_conio_terminal_mode()
//{
//    struct termios new_termios;
//
//    /* take two copies - one for now, one for later */
//    tcgetattr(0, &orig_termios);
//    memcpy(&new_termios, &orig_termios, sizeof(new_termios));
//
//    /* register cleanup handler, and set the new terminal mode */
//    atexit(reset_terminal_mode);
//    cfmakeraw(&new_termios);
//    tcsetattr(0, TCSANOW, &new_termios);
//}
//
//fn kbhit() -> bool {
//    struct timeval tv = { 0L, 0L };
//    fd_set fds;
//    FD_ZERO(&fds);
//    FD_SET(0, &fds);
//    return select(1, &fds, NULL, NULL, &tv);
//}
//
//fn getch() -> char {
//    let c: char = 0;
//    if c_api::read(0, &c, sizeof(c) < 0 {
//        return 0;
//    } else {
//        return c;
//    }
//}