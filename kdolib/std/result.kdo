use std::*;

// Generics are a bit meh currently, so let's start with these primitive results for now.
pub struct Result<T> {
    // layout is probably okay for most applications
    // Also we do not have any unions.
    error: c_str,
    value: T,
    is_ok: bool
}

impl<T> Result<T> {
    pub fn ok(value: T) -> Result<T> {
        _ { value: value, error: c_api::nullstr, is_ok: true }
    }

    pub fn err(error: c_str) -> Result<T> {
        _ { value: std::mem::uninit(), error: error, is_ok: false }
    }

    pub fn is_ok(self: Result<T>) -> bool {
        self.is_ok
    }

    pub fn is_err(self: Result<T>) -> bool {
        self.is_ok == false
    }

    pub fn to_ok_option(self: Result<T>) -> Option<T> {
        if self.is_ok {
            Option::<_>::some(self.value)
        } else {
            Option::<_>::none()
        }
    }

    pub fn to_err_option(self: Result<T>) -> Option<c_str> {
        if self.is_ok {
            Option::<_>::none()
        } else {
            Option::<_>::some(self.error)
        }
    }

    pub fn unwrap(self: Result<T>) -> T {
        if self.is_ok {
            self.value
        } else {
            let msg = c_api::nullstr;
            let size = 0usize;
            let stream = c_api::open_memstream(&msg, &size);
            c_api::fprintf(stream, "Unwrapping erroneous result: %s", self.error);
            c_api::fclose(stream);
            panic(msg)
        }
    }

    pub fn expect(self: Result<T>, error: c_str) -> T {
        if self.is_ok {
            self.value
        } else {
            let msg = c_api::nullstr;
            let size = 0usize;
            let stream = c_api::open_memstream(&msg, &size);
            c_api::fprintf(stream, "Unwrapping erroneous result: %s: %s", self.error, error);
            c_api::fclose(stream);
            panic(msg)
        }
    }

    pub fn unwrap_or(self: Result<T>, fallback: T) -> T {
        if self.is_ok {
            self.value
        } else {
            fallback
        }
    }

    pub fn as_ref(self: ptr<Result<T>>) -> Result<ptr<T>> {
        if self.is_ok {
            Result::<_>::ok(&self.value)
        } else {
            Result::<_>::err(self.error)
        }
    }

    pub fn deref(self: Result<ptr<T>>) -> Result<T> {
        if self.is_ok {
            Result::<_>::ok(*self.value)
        } else {
            Result::<_>::err(self.error)
        }
    }
}

use std::fmt::*;

impl<T: Fmt> Result<T>: Fmt {
    fn dyn_fmt(self: ptr<Result<T>>) -> DynFmt {
        _ { object: typecast(self), fmt: Result::<T>::fmt }
    }
    fn fmt(self: ptr<Result<T>>, fmt: ptr<Formatter>, stream: ptr<FormatStream>) {
        if self.is_ok {
            stream.write_str("ok(");
            self.value.fmt(fmt, stream);
            stream.write_str(")");
        } else {
            stream.write_str("err(");
            self.error.fmt(fmt, stream);
            stream.write_str(")");
        }
    }
}