use std::*;
use std::io::CFileStream;

use c_api::fprintf;

use core::trace::*;

pub use Frame;
pub use Function;
pub use Location;

pub struct Traceback {
    top: ptr<Frame>
}

pub impl Traceback {
    fn here(depth: usize) -> Result<Location> {
        let frame = TOP_FRAME;
        if frame == std::mem::null() || frame.callflags & CF_ROOT != 0 {
            return Result::<_>::err("Cannot get location at this depth");
        };
        while depth > 0 {
            frame = frame.parent;
            depth -= 1;
            if frame == std::mem::null() || frame.callflags & CF_ROOT != 0 {
                return Result::<_>::err("Cannot get location at this depth");
            };
        };
        Result::<_>::ok(frame.loc)
    }

    #[no_trace]
    fn collect_allocated() -> Traceback {
        if TOP_FRAME == std::mem::null() {
            return _ { top: std::mem::null() };
        };
        let frame = TOP_FRAME;
        let top: ptr<Frame> = std::mem::new_uninit();
        let current = top;
        while frame != std::mem::null() {
            *current = *frame;
            if frame.parent != std::mem::null() {
                current.parent = std::mem::new_uninit();
                current = current.parent;
            };
            frame = frame.parent;
        };
        _ {
            top: top
        }
    }

    pub fn fprint(self: ptr<Traceback>, stream: CFileStream) {
        let index = 0;
        let frame = self.top;
        if frame == std::mem::null() {
            fprintf(stream, "No stack trace available\n");
            return;
        };
        fprintf(stream, "Stack trace:\n");
        while frame != std::mem::null() {
            if (frame.callflags & CF_ROOT != 0) {
                fprintf(stream, "%3d. (entry)\n", index);
            } else {
                fprintf(stream, "%3d. ", index);
                frame.loc.fprint(stream);
                fprintf(stream, "\n");
            };
            if (frame.callflags & CF_POINTER != 0) {
                fprintf(stream, "\t(function_ptr)\t---\n");
            } else {
                fprintf(stream, "\t%s\t", frame.call.full_name);
                frame.call.loc.fprint(stream);
                fprintf(stream, "\n");
            };
            index += 1;
            frame = frame.parent;
        }
    }

    pub fn free(self: ptr<Traceback>) {
        let frame = self.top;
        while frame != std::mem::null() {
            let parent = frame.parent;
            std::mem::free(frame);
            frame = parent;
        }
    }
}