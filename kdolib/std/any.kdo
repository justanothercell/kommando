use std::*;
use std::io::stderr;
use core::intrinsics::typeid;
use core::intrinsics::typename;

pub struct Any {
    tid: TypeId,
    object: raw_ptr
}

impl Any {
    pub fn from<T>(object: ptr<T>) -> Any {
        _ {
            tid: typeid::<T>(),
            object: typecast(object)
        }
    }

    pub fn is<T>(self: Any) -> bool {
        typeid::<T>() == self.tid
    }

    pub fn as<T>(self: Any) -> ptr<T> {
        if self.is::<T>() {
            typecast(self.object)
        } else {
            c_api::fprintf(stderr, "ERROR: cannot interpret this `Any` object as %s\n", typename::<T>());
            c_api::exit(1);
            unreachable()
        }
    }

    pub fn try_as<T>(self: Any) -> Option<ptr<T>> {
        if self.is::<T>() {
            Option::<_>::some(typecast(self.object))
        } else {
            Option::<_>::none()
        }
    }
}