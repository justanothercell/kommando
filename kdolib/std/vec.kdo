use std::*;

pub struct Vec<T> {
    length: usize,
    capacity: usize,
    buffer: ptr<T>
}

impl<T> Vec<T> {
    pub fn new() -> Vec<T> {
        _ {
            length: 0,
            capacity: 0,
            buffer: std::mem::null()
        }
    }

    fn reserve_armortized(v: ptr<Vec<T>>, size: usize) {
        if v.capacity >= size { return; };
        if v.capacity == 0 { v.capacity = 8; };
        while v.capacity < size {
            v.capacity *= 2;
        };
        v.buffer = std::mem::arr_resize(v.buffer, v.capacity);
    }

    pub fn push(v: ptr<Vec<T>>, item: T) {
        v.reserve_armortized(v.length + 1);
        *std::mem::arr_offset(v.buffer, v.length) = item;
        v.length += 1;
    }

    pub fn get(v: ptr<Vec<T>>, i: usize) -> Option<T> {
        if i < v.length {
            Option::<_>::some(*std::mem::arr_offset(v.buffer, i))
        } else {
            Option::<_>::none()
        }
    }

    pub fn get_ref(v: ptr<Vec<T>>, i: usize) -> Option<ptr<T>> {
        if i < v.length {
            Option::<_>::some(std::mem::arr_offset(v.buffer, i))
        } else {
            Option::<_>::none()
        }
    }

    pub fn pop(v: ptr<Vec<T>>) -> Option<T> {
        if v.length > 0 {
            v.length -= 1;
            Option::<_>::some(*std::mem::arr_offset(v.buffer, v.length))
        } else {
            Option::<_>::none()
        }
    }

    pub fn free(v: ptr<Vec<T>>) {
        std::mem::free(v.buffer)
    }
}