
use std::*;
use std::fmt::*;

pub struct Option<T> {
    value: T,
    exists: bool
}

impl<T> Option<T> {
    pub fn some(value: T) -> Option<T> {
        _ { value: value, exists: true }
    }

    pub fn none() -> Option<T> {
        _ { value: std::mem::uninit(), exists: false }
    }

    pub fn is_some(self: Option<T>) -> bool {
        self.exists
    }

    pub fn is_none(self: Option<T>) -> bool {
        self.exists == false
    }

    pub fn to_result<E>(self: Option<T>, error: E) -> Result<T, E> {
        if self.exists {
            Result::<_, _>::ok(self.value)
        } else {
            Result::<_, _>::err(error)
        }
    }

    pub fn unwrap(self: Option<T>) -> T {
        if self.exists {
            self.value
        } else {
            panic("Unwrapping empty option")
        }
    }

    pub fn unwrap_or(self: Option<T>, fallback: T) -> T {
        if self.exists {
            self.value
        } else {
            fallback
        }
    }

    pub fn expect(self: Option<T>, error: c_str) -> T {
        if self.exists {
            self.value
        } else {
            panic(format("Unwrapping empty option: $", error.dyn_fmt()))
        }
    }

    pub fn replace(self: ptr<Option<T>>, new: T) -> Option<T> {
        if self.exists {
            Option::<_>::some(std::mem::replace(&self.value, new))
        } else {
            self.value = new;
            self.exists = true;
            Option::<_>::none()
        }
    }

    pub fn take(self: ptr<Option<T>>) -> T {
        if self.exists {
            self.exists = false;
            self.value
        } else {
            panic("ERROR: Cannot take value out of empty option\n")
        }
    }

    pub fn try_take(self: ptr<Option<T>>) -> Option<T> {
        if self.exists {
            self.exists = false;
            Option::<_>::some(self.value)
        } else {
            self.exists = false;
            Option::<_>::none()
        }
    }

    pub fn as_ref(self: ptr<Option<T>>) -> Option<ptr<T>> {
        if self.exists {
            Option::<_>::some(&self.value)
        } else {
            Option::<_>::none()
        }
    }

    pub fn deref(self: Option<ptr<T>>) -> Option<T> {
        if self.exists {
            Option::<_>::some(*self.value)
        } else {
            Option::<_>::none()
        }
    }
}

impl<T: Fmt> Option<T>: Fmt {
    fn dyn_fmt(self: ptr<Option<T>>) -> DynFmt {
        _ { object: typecast(self), fmt: Option::<T>::fmt }
    }
    fn fmt(self: ptr<Option<T>>, fmt: ptr<Formatter>, stream: ptr<FormatStream>) {
        if self.exists {
            stream.write_str("some(").write(fmt, self.value).write_str(")");
        } else {
            stream.write_str("none");
        }
    }
}