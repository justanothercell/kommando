use std::*;
use std::io::stderr;

pub fn malloc<T>() -> ptr<T> {
    let size = core::intrinsics::sizeof::<T>();
    if size == 0 { return null(); };
    let raw_ptr = c_api::malloc(size);
    if raw_ptr == c_api::null {
        panic("Program is out of memory")
    };
    typecast(raw_ptr)
}

pub fn malloc_zeroed<T>() -> ptr<T> {
    let size = core::intrinsics::sizeof::<T>();
    if size == 0 { return null(); };
    let raw_ptr = c_api::calloc(1, size); // calloc is faster than memset(raw_ptr, 0, size)
    if raw_ptr == c_api::null {
        panic("Program is out of memory")
    };
    typecast(raw_ptr)
}

pub fn new_uninit<T>() -> T {
    let size = core::intrinsics::sizeof::<T>();
    let raw_ptr = c_api::alloca(size);
    *typecast(raw_ptr)
}

pub fn new_zeroed<T>() -> T {
    let size = core::intrinsics::sizeof::<T>();
    let raw_ptr = c_api::alloca(size);
    *typecast(c_api::memset(raw_ptr, 0, size))
}


pub fn free<T>(ptr: ptr<T>) {
    let raw_ptr = to_raw(ptr);
    if raw_ptr == c_api::null { return; };
    c_api::free(raw_ptr);
}

pub fn arr_malloc<T>(n: usize) -> ptr<T> {
    let size = core::intrinsics::sizeof::<T>();
    if size == 0 || n == 0 { return null(); };
    let raw_ptr = c_api::calloc(n, size);
    if raw_ptr == c_api::null {
        panic("Program is out of memory")
    };
    typecast(raw_ptr)
}

pub fn arr_resize<T>(arr: ptr<T>, n: usize) -> ptr<T> {
    let size = core::intrinsics::sizeof::<T>();
    if size == 0 || n == 0 { return null(); };
    let raw_ptr = to_raw(arr);
    raw_ptr = c_api::reallocarray(raw_ptr, n, size);
    if raw_ptr == c_api::null {
        panic("Program is out of memory")
    };
    typecast(raw_ptr)
}

pub fn arr_offset<T>(arr: ptr<T>, i: usize) -> ptr<T> {
    let usize_ptr = typecast::<_, usize>(arr);
    if usize_ptr == 0 { return null(); };
    let size = core::intrinsics::sizeof::<T>();
    typecast(usize_ptr + size * i)
}

pub fn arr_get<T>(arr: ptr<T>, i: usize) -> T {
    *arr_offset(arr, i)
}

pub fn null<T>() -> ptr<T> {
    typecast(0usize)
}

pub fn to_raw<T>(ptr: ptr<T>) -> raw_ptr {
    typecast(ptr)
}

pub fn swap<T>(p1: ptr<T>, p2: ptr<T>) {
    let temp = *p1;
    *p1 = *p2;
    *p2 = temp;
}

pub fn replace<T>(ptr: ptr<T>, item: T) -> T {
    swap(ptr, &item);
    item
}