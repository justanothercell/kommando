use core::*;
use core::types::*;
use core::intrinsics::*;

pub trait T: Cmp {
    fn cmp(self: ptr<T>, other: ptr<T>) -> i32;
}

#[extern]
fn strcmp(a: c_str, b: c_str) -> i32;
impl c_str: Cmp {
    pub fn cmp(self: ptr<c_str>, other: ptr<c_str>) -> i32 {
        strcmp(*self, *other)
    }
}

impl bool: Cmp { pub fn cmp(self: ptr<bool>, other: ptr<bool>) -> bool { if *self < *other { return 0-1; }; if *self > *other { return 1; }; 0 } }

impl i8: Cmp { pub fn cmp(self: ptr<i8>, other: ptr<i8>) -> i32 { if *self < *other { return 0-1; }; if *self > *other { return 1; }; 0 } }
impl i16: Cmp { pub fn cmp(self: ptr<i16>, other: ptr<i16>) -> i32 { if *self < *other { return 0-1; }; if *self > *other { return 1; }; 0 } }
impl i32: Cmp { pub fn cmp(self: ptr<i32>, other: ptr<i32>) -> i32 { if *self < *other { return 0-1; }; if *self > *other { return 1; }; 0 } }
impl i64: Cmp { pub fn cmp(self: ptr<i64>, other: ptr<i64>) -> i32 { if *self < *other { return 0-1; }; if *self > *other { return 1; }; 0 } }
impl i128: Cmp { pub fn cmp(self: ptr<i128>, other: ptr<i128>) -> i32 { if *self < *other { return 0-1; }; if *self > *other { return 1; }; 0 } }
impl isize: Cmp { pub fn cmp(self: ptr<isize>, other: ptr<isize>) -> i32 { if *self < *other { return 0-1; }; if *self > *other { return 1; }; 0 } }

impl u8: Cmp { pub fn cmp(self: ptr<u8>, other: ptr<u8>) -> i32 { if *self < *other { return 0-1; }; if *self > *other { return 1; }; 0 } }
impl u16: Cmp { pub fn cmp(self: ptr<u16>, other: ptr<u16>) -> i32 { if *self < *other { return 0-1; }; if *self > *other { return 1; }; 0 } }
impl u32: Cmp { pub fn cmp(self: ptr<u32>, other: ptr<u32>) -> i32 { if *self < *other { return 0-1; }; if *self > *other { return 1; }; 0 } }
impl u64: Cmp { pub fn cmp(self: ptr<u64>, other: ptr<u64>) -> i32 { if *self < *other { return 0-1; }; if *self > *other { return 1; }; 0 } }
impl u128: Cmp { pub fn cmp(self: ptr<u128>, other: ptr<u128>) -> i32 { if *self < *other { return 0-1; }; if *self > *other { return 1; }; 0 } }
impl usize: Cmp { pub fn cmp(self: ptr<usize>, other: ptr<usize>) -> i32 { if *self < *other { return 0-1; }; if *self > *other { return 1; }; 0 } }
