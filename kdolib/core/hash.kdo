use core::*;
use core::types::*;
use core::intrinsics::*;

pub trait H: Hasher {
    fn digest(self: ptr<H>, data: u8);
    fn digest_bytes(self: ptr<H>, bytes: ptr<u8>, length: usize);
    fn digest_bytes_of<T>(self: ptr<H>, item: ptr<T>);
    fn finish(self: ptr<H>) -> u64;
}

const FNV1a_OFFSET_BASIS: u64 = 0xcbf29ce484222325;
const FNV1a_PRIME: u64 = 0x100000001b3;

pub struct FNV1aHasher {
    hash: u64
}

pub use FNV1aHasher as DefaultHasher;

impl FNV1aHasher: Hasher {
    fn digest(self: ptr<FNV1aHasher>, data: u8) {
        self.hash ^= numcast(data);
        self.hash *= FNV1a_PRIME;
    }
    fn digest_bytes(self: ptr<FNV1aHasher>, bytes: ptr<u8>, length: usize) {
        let base: usize = typecast(bytes);
        let offset: usize = 0;
        while offset < length {
            self.digest(*typecast::<_, ptr<u8>>(base + offset));
            offset += 1;
        }
    }
    fn digest_bytes_of<T>(self: ptr<FNV1aHasher>, item: ptr<T>) {
        let item: ptr<u8> = typecast::<ptr<T>, ptr<u8>>(item);
        let size = sizeof::<T>();
        self.digest_bytes(item, size);
    }
    fn finish(self: ptr<FNV1aHasher>) -> u64 {
        self.hash
    }
}

impl FNV1aHasher {
    fn new() -> FNV1aHasher {
        FNV1aHasher::<>::new_with_key(0)
    }

    fn new_with_key(key: u64) -> FNV1aHasher {
        _ { hash: FNV1a_OFFSET_BASIS ^ key }
    }
}

pub trait T: Hash {
    fn hash<H: Hasher>(self: ptr<T>, hasher: ptr<H>);
}

#[extern]
fn strlen(s: c_str) -> usize;
impl c_str: Hash {
    pub fn hash<H: Hasher>(self: ptr<c_str>, hasher: ptr<H>) {
        let len = strlen(*self);
        hasher.digest_bytes_of(&len);
        hasher.digest_bytes(typecast(*self), len);
    }
}

impl bool: Hash { pub fn hash<H: Hasher>(self: ptr<bool>, hasher: ptr<H>) { hasher.digest_bytes_of(self) } }
impl raw_ptr: Hash { pub fn hash<H: Hasher>(self: ptr<raw_ptr>, hasher: ptr<H>) { hasher.digest_bytes_of(self) } }

impl i8: Hash { pub fn hash<H: Hasher>(self: ptr<i8>, hasher: ptr<H>) { hasher.digest_bytes_of(self) } }
impl i16: Hash { pub fn hash<H: Hasher>(self: ptr<i16>, hasher: ptr<H>) { hasher.digest_bytes_of(self) } }
impl i32: Hash { pub fn hash<H: Hasher>(self: ptr<i32>, hasher: ptr<H>) { hasher.digest_bytes_of(self) } }
impl i64: Hash { pub fn hash<H: Hasher>(self: ptr<i64>, hasher: ptr<H>) { hasher.digest_bytes_of(self) } }
impl i128: Hash { pub fn hash<H: Hasher>(self: ptr<i128>, hasher: ptr<H>) { hasher.digest_bytes_of(self) } }
impl isize: Hash { pub fn hash<H: Hasher>(self: ptr<isize>, hasher: ptr<H>) { hasher.digest_bytes_of(self) } }

impl u8: Hash { pub fn hash<H: Hasher>(self: ptr<u8>, hasher: ptr<H>) { hasher.digest_bytes_of(self) } }
impl u16: Hash { pub fn hash<H: Hasher>(self: ptr<u16>, hasher: ptr<H>) { hasher.digest_bytes_of(self) } }
impl u32: Hash { pub fn hash<H: Hasher>(self: ptr<u32>, hasher: ptr<H>) { hasher.digest_bytes_of(self) } }
impl u64: Hash { pub fn hash<H: Hasher>(self: ptr<u64>, hasher: ptr<H>) { hasher.digest_bytes_of(self) } }
impl u128: Hash { pub fn hash<H: Hasher>(self: ptr<u128>, hasher: ptr<H>) { hasher.digest_bytes_of(self) } }
impl usize: Hash { pub fn hash<H: Hasher>(self: ptr<usize>, hasher: ptr<H>) { hasher.digest_bytes_of(self) } }
