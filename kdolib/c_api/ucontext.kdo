use core::types::*;

// struct layout on arch x86_64.
// sizeof(ucontext_t) = 968

/// Initalizes the structure pointed to by ucp.
/// returns -1 on error and 0 on success,
#[extern]
pub fn getcontext(ucp: ptr<ucontext_t>) -> i32;

/// Restore the context to the structure pointed to by ucp.
/// returns -1 on error, does not return on success.
#[extern]
pub fn setcontext(ucp: ptr<ucontext_t>) -> i32;

/// Fill the context with this execution info.
/// Note: the va_args of length count need to be of type i32.
#[extern]
pub fn makecontext(ucp: ptr<ucontext_t>, function: function_ptr<unit>, count: i32, *);

/// save the current instruction context in uocp and continue with ucp.
/// returns -1 on error and 0 on success (when returning back from a different context)
#[extern]
pub fn swapcontext(uocp: ptr<ucontext_t>, ucp: ptr<ucontext_t>) -> i32;

pub struct ucontext_t {
    uc_flags: u64,
    uc_link: ptr<ucontext_t>,
    uc_stack: stack_t,
    uc_mcontext: mcontext_t,
    uc_sigmask: sigset_t,
    __fpregs_mem: _libc_fpstate,
    __ssp0: u64,
    __ssp1: u64,
    __ssp2: u64,
    __ssp3: u64,
}

struct stack_t {
    ss_sp: raw_ptr,
    ss_flags: i32,
    ss_size: usize
}

struct mcontext_t {
    gregs: gregset_t,
    fpregs: raw_ptr,
    __reserved0: u64,
    __reserved1: u64,
    __reserved2: u64,
    __reserved3: u64,
    __reserved4: u64,
    __reserved5: u64,
    __reserved6: u64,
    __reserved7: u64,
}

struct gregset_t {
    g0: i64,
    g1: i64,
    g2: i64,
    g3: i64,
    g4: i64,
    g5: i64,
    g6: i64,
    g7: i64,
    g8: i64,
    g9: i64,
    g10: i64,
    g11: i64,
    g12: i64,
    g13: i64,
    g14: i64,
    g15: i64,
    g16: i64,
    g17: i64,
    g18: i64,
    g19: i64,
    g20: i64,
    g21: i64,
    g22: i64,
}

struct sigset_t {
    __val0: u64,
    __val1: u64,
    __val2: u64,
    __val3: u64,
    __val4: u64,
    __val5: u64,
    __val6: u64,
    __val7: u64,
    __val8: u64,
    __val9: u64,
    __val10: u64,
    __val11: u64,
    __val12: u64,
    __val13: u64,
    __val14: u64,
    __val15: u64,
}

struct _libc_fpstate {
    /* 64-bit FXSAVE format.  */
    cwd: u16,
    swd: u16,
    ftw: u16,
    fop: u16,
    rip: u64,
    rdp: u64,
    mxcsr: u32,
    mxcr_mask: u32,
    _st0: _libc_fpxreg,
    _st1: _libc_fpxreg,
    _st2: _libc_fpxreg,
    _st3: _libc_fpxreg,
    _st4: _libc_fpxreg,
    _st5: _libc_fpxreg,
    _st6: _libc_fpxreg,
    _st7: _libc_fpxreg,
    _xmm0: _libc_xmmreg,
    _xmm1: _libc_xmmreg,
    _xmm2: _libc_xmmreg,
    _xmm3: _libc_xmmreg,
    _xmm4: _libc_xmmreg,
    _xmm5: _libc_xmmreg,
    _xmm6: _libc_xmmreg,
    _xmm7: _libc_xmmreg,
    _xmm8: _libc_xmmreg,
    _xmm9: _libc_xmmreg,
    _xmm10: _libc_xmmreg,
    _xmm11: _libc_xmmreg,
    _xmm12: _libc_xmmreg,
    _xmm13: _libc_xmmreg,
    _xmm14: _libc_xmmreg,
    _xmm15: _libc_xmmreg,
    __glibc_reserved0: u32,
    __glibc_reserved1: u32,
    __glibc_reserved2: u32,
    __glibc_reserved3: u32,
    __glibc_reserved4: u32,
    __glibc_reserved5: u32,
    __glibc_reserved6: u32,
    __glibc_reserved7: u32,
    __glibc_reserved8: u32,
    __glibc_reserved9: u32,
    __glibc_reserved10: u32,
    __glibc_reserved11: u32,
    __glibc_reserved12: u32,
    __glibc_reserved13: u32,
    __glibc_reserved14: u32,
    __glibc_reserved15: u32,
    __glibc_reserved16: u32,
    __glibc_reserved17: u32,
    __glibc_reserved18: u32,
    __glibc_reserved19: u32,
    __glibc_reserved20: u32,
    __glibc_reserved21: u32,
    __glibc_reserved22: u32,
    __glibc_reserved23: u32,
}

struct _libc_fpxreg {
    significand0: u16,
    significand1: u16,
    significand2: u16,
    significand3: u16,
    exponent: u16,
    __glibc_reserved0: u16,
    __glibc_reserved1: u16,
    __glibc_reserved2: u16,
}

struct _libc_xmmreg {
    element0: u32,
    element1: u32,
    element2: u32,
    element3: u32,
}