use core::types::*;

pub mod math;
pub mod str;
pub mod ucontext;

pub use core::types::raw_ptr as CFileStream;

#[extern]
pub fn printf(fmt: c_str, *) -> i32;
#[extern]
pub fn fprintf(stream: CFileStream, fmt: c_str, *) -> i32;
#[extern]
pub fn fopen(path: c_str, mode: c_str) -> CFileStream;
#[extern]
pub fn fclose(stream: CFileStream) -> i32;
#[extern]
pub fn fflush(stream: CFileStream) -> i32;
#[extern]
pub fn feof(stream: CFileStream) -> i32;

#[extern]
pub fn open_memstream(stream: ptr<c_str>, size: ptr<usize>) -> CFileStream;

#[extern]
pub fn exit(code: i32) -> c_void;

#[extern]
pub fn malloc(size: usize) -> raw_ptr;
#[extern]
pub fn alloca(size: usize) -> raw_ptr;
#[extern]
pub fn realloc(ptr: raw_ptr, size: usize) -> raw_ptr;
#[extern]
pub fn free(ptr: raw_ptr) -> c_void;
#[extern]
pub fn calloc(count: usize, size: usize) -> raw_ptr;
#[extern]
pub fn reallocarray(ptr: raw_ptr, count: usize, size: usize) -> raw_ptr;

#[extern]
pub fn memset(ptr: raw_ptr, char_value: i32, count: usize) -> raw_ptr;

#[extern]
pub fn aligned_alloc(alignment: usize, size: usize) -> raw_ptr;
#[extern]
pub fn getpagesize() -> usize;

pub const null: raw_ptr = 0;
pub const nullstr: c_str = 0;

pub fn freestr(str: c_str) -> c_void {
    free(core::intrinsics::typecast(str))
}

// gnu-c
#[extern]
pub fn getline(out_line: ptr<c_str>, out_size: ptr<usize>, stream: raw_ptr) -> i32;

#[extern]
pub fn raise(signal: i32) -> i32;
#[extern]
pub fn kill(pid: i32, signal: i32) -> i32;
#[extern]
pub fn signal(signal: i32, handler: function_ptr<i32>) -> function_ptr<i32>;

#[extern]
pub fn system(cmd: c_str) -> i32;

pub fn is_shell() -> bool {
    system(nullstr) != 0
}

#[extern]
pub fn fork() -> i32;

#[extern]
pub fn rand() -> i32;
#[extern]
pub fn srand(seed: u32);

#[extern]
pub fn time(tloc: raw_ptr) -> u64;