type X = { a: i32, b: bool };
type Color = (u8, u8, u8);
type Y = {
    color: Color,
    foo: (u8, bool),
    bar: {
        one: i32,
        two: u32
    }
};
type Unit = ();
type NumberUnion32 = i32 | u32 | f32;
type NumberUnion32 = Int: i32 | Uint: u32 | Float: f32;
type Option<T> = [
    Some: T,
    None: ()
];
type Some<T> = T,
type None = ();
type Option<T> = [
    Some<T>,
    None
];
 
let x1 = X { a: 0, b: false };
let x2: X = { a: 0, b: false };
let c = Color (255, 0, 255);
let y: Y = {
    color: (0, 0, 0),
    foo: (255, true),
    bar: {
        one: 1,
        two: 2
    }
};

let marker = Unit ();
let num1: NumberUnion32 = 4.0f32;
let num2: NumberUnion32::i32 = 4;
let num3 = NumberUnion32::u32 5;
let s1 = Option::Some 5;
let s2: Option::Some = 5;
let s3 = 5 as Option::Some;
let n = Option::None();